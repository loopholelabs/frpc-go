{{define "server"}}

{{ if .numStreamMethods -}}
type RPCStreamOpen struct {
    operation uint16
}

func (x *RPCStreamOpen) Error(b *polyglot.Buffer, err error) {
    polyglot.Encoder(b).Error(err)
}

func (x *RPCStreamOpen) Encode(b *polyglot.Buffer) {
    polyglot.Encoder(b).Uint16(x.operation)
}

func (x *RPCStreamOpen) Decode(b []byte) error {
    if x == nil {
        return ErrDecodeNil
    }
    d := polyglot.Decoder(b)
    return x.decode(d)
}

func (x *RPCStreamOpen) decode(d *polyglot.BufferDecoder) error {
    var err error
    x.operation, err = d.Uint16()
    return err
}
{{ end -}}

type Server struct {
    server *frisbee.Server
    {{ if .numStreamMethods -}}
    wg sync.WaitGroup
    {{end -}}
}

func NewServer({{ GetServerFields .services }}, tlsConfig *tls.Config, logger types.Logger) (*Server, error) {
    s := new(Server)
    table := make(frisbee.HandlerTable)
    {{template "serverhandlers" .services -}}
    var err error
    if tlsConfig != nil {
        s.server, err = frisbee.NewServer(table, context.Background(), frisbee.WithTLS(tlsConfig), frisbee.WithLogger(logger))
        if err != nil {
            return nil, err
        }
    } else {
        s.server, err = frisbee.NewServer(table, context.Background(), frisbee.WithLogger(logger))
        if err != nil {
            return nil, err
        }
    }

    {{ if .numStreamMethods -}}
    s.server.SetStreamHandler(func(ctx context.Context, stream *frisbee.Stream) {
        streamCtx := context.WithValue(ctx, ConnectionContextKey, stream.Conn())
        streamCtx = context.WithValue(streamCtx, StreamContextKey, stream)
        p, err := stream.ReadPacket()
        if err != nil {
            return
        }
        open := &RPCStreamOpen{}
        err = open.Decode((*p.Content).Bytes())
        if err != nil {
            stream.Close()
            return
        }
        switch open.operation {
            {{ $counter := Counter 9 -}}
            {{ range $i, $v := (MakeIterable .services.Len) -}}
                {{ $service := $.services.Get $i -}}
                {{ range $i, $v := (MakeIterable $service.Methods.Len) -}}
                    {{ $method := $service.Methods.Get $i -}}
                    {{ $opIndex := call $counter -}}
                    {{ if or $method.IsStreamingClient $method.IsStreamingServer -}}
                        case {{ $opIndex }}:
                            s.create{{ CamelCaseName $method.Name }}Server(streamCtx, {{ FirstLowerCase (CamelCaseName $service.Name) }}, stream)
                    {{end -}}
                {{end -}}
            {{end -}}
        }
    })

    s.server.StreamContext = func(ctx context.Context, stream *frisbee.Stream) context.Context {
      return context.WithValue(ctx, ConnectionContextKey, stream.Conn())
    }

    {{ end -}}

    s.server.ConnContext = func (ctx context.Context, conn *frisbee.Async) context.Context {
        return context.WithValue(ctx, ConnectionContextKey, conn)
    }

    return s, nil
}

func (s *Server) SetOnClosed(f func(*frisbee.Async, error)) error {
    return s.server.SetOnClosed(f)
}

func (s *Server) SetPreWrite(f func()) error {
    return s.server.SetPreWrite(f)
}

func (s *Server) SetConcurrency(concurrency uint64) {
    s.server.SetConcurrency(concurrency)
}

func (s *Server) Start(addr string) error {
    return s.server.Start(addr)
}

func (s *Server) StartWithListener(listener net.Listener) error {
    return s.server.StartWithListener(listener)
}

func (s *Server) ServeConn(conn net.Conn) {
    s.server.ServeConn(conn)
}

func (s *Server) Shutdown() error {
    err := s.server.Shutdown()
    if err != nil {
        return err
    }
    {{ if .numStreamMethods -}}
    s.wg.Wait()
    {{end -}}
    return nil
}

{{template "servermethods" .services }}
{{ end -}}

{{define "servermethods"}}
    {{ $counter := Counter 9 -}}
    {{ range $i, $v := (MakeIterable .Len) -}}
        {{ $service := $.Get $i -}}
        {{ range $i, $v := (MakeIterable $service.Methods.Len) }}
            {{ $method := $service.Methods.Get $i -}}
            {{ $opIndex := call $counter -}}
            {{if or $method.IsStreamingClient $method.IsStreamingServer -}}
                type {{ CamelCaseName $method.Name }}Server struct {
                    recv func() (*{{ CamelCase $method.Input.FullName }}, error)
                    send func (*{{ CamelCase $method.Output.FullName }}) error

                    stream *frisbee.Stream
                    closed *atomic.Bool
                }

                func (s *Server) create{{ CamelCaseName $method.Name}}Server (ctx context.Context, {{ FirstLowerCase (CamelCaseName $service.Name) }} {{ CamelCaseName $service.Name }}, stream *frisbee.Stream) {
                    srv := &{{ CamelCaseName $method.Name }}Server{
                        stream: stream,
                    }

                    {{ if $method.IsStreamingClient -}}
                        srv.recv = func() (*{{ CamelCase $method.Input.FullName  }}, error) {
                            p, err := srv.stream.ReadPacket()
                            if err != nil {
                                return nil, err
                            }

                            res := New{{ CamelCase $method.Input.FullName }}()
                            err = res.Decode((*p.Content).Bytes())
                            if err != nil {
                                return nil, err
                            }
                            if errors.Is(res.error, io.EOF) {
                                return nil, io.EOF
                            }

                            return res, nil
                        }
                    {{ end -}}

                    srv.send = func (m *{{ CamelCase $method.Output.FullName }}) error {
                        p := packet.Get()

                        m.Encode(p.Content)
                        p.Metadata.ContentLength = uint32((*p.Content).Len())
                        return srv.stream.WritePacket(p)
                    }

                    {{ if not $method.IsStreamingClient -}}
                    incoming, err := stream.ReadPacket()
                    if err != nil {
                        return
                    }
                    req := New{{ CamelCase $method.Input.FullName  }}()
                    err = req.Decode((*incoming.Content).Bytes()[:incoming.Metadata.ContentLength])
                    {{ end -}}
                    s.wg.Add(1)
                    go func() {
                    {{ if $method.IsStreamingClient -}}
                        err := {{ FirstLowerCaseName $service.Name }}.{{ CamelCaseName $method.Name }}(ctx, srv)
                    {{ else }}
                        err := {{ FirstLowerCaseName $service.Name }}.{{ CamelCaseName $method.Name }}(ctx, req, srv)
                    {{ end -}}
                        if err != nil {
                            res := {{ CamelCase $method.Output.FullName }}{error: err}
                            res.flags = SetErrorFlag(res.flags, true)
                            srv.CloseAndSend(&res)
                        } else {
                            srv.CloseSend()
                        }
                        s.wg.Done()
                    }()
                }

                {{ if $method.IsStreamingClient -}}
                    func (x *{{ CamelCaseName $method.Name }}Server) Recv() (*{{ CamelCase $method.Input.FullName }}, error) {
                        return x.recv()
                    }

                    func (x *{{ CamelCaseName $method.Name }}Server) close() {
                        x.stream.Close()
                    }
                {{ end -}}

                {{ if $method.IsStreamingServer -}}
                    func (x *{{ CamelCaseName $method.Name }}Server) Send(m *{{ CamelCase $method.Output.FullName }}) error {
                        return x.send(m)
                    }
                {{ end -}}

                func (x *{{ CamelCaseName $method.Name }}Server) CloseSend() error {
                    return x.send(&{{ CamelCase $method.Output.FullName }}{error: io.EOF})
                }

                func (x *{{ CamelCaseName $method.Name }}Server) CloseChannel() <-chan struct{} {
                    return x.stream.Conn().CloseChannel()
                }

                {{ if or $method.IsStreamingClient $method.IsStreamingServer -}}
                    func (x *{{ CamelCaseName $method.Name }}Server) CloseAndSend(m *{{ CamelCase $method.Output.FullName }}) error {
                        err := x.send(m)
                        if err != nil {
                            return err
                        }
                        return x.CloseSend()
                    }
                {{ end -}}
            {{end -}}
        {{end -}}
    {{end -}}
{{end}}

{{define "serverhandlers"}}
    {{ $counter := Counter 9 -}}
    {{ range $i, $v := (MakeIterable .Len) -}}
        {{ $service := $.Get $i -}}
        {{ range $i, $v := (MakeIterable $service.Methods.Len) -}}
            {{ $method := $service.Methods.Get $i -}}
            {{ $count := call $counter -}}
            {{ if not (or $method.IsStreamingServer $method.IsStreamingClient) -}}
            table[{{ $count }}] = func(ctx context.Context, incoming *packet.Packet) (outgoing *packet.Packet, action frisbee.Action) {
                req := New{{ CamelCase $method.Input.FullName  }}()
                err := req.Decode((*incoming.Content).Bytes()[:incoming.Metadata.ContentLength])
                if err == nil {
                    var res *{{ CamelCase $method.Output.FullName }}
                    outgoing = incoming
                    outgoing.Content.Reset()
                    res, err = {{ FirstLowerCase (CamelCaseName $service.Name) }}.{{ CamelCaseName $method.Name }}(ctx, req)
                    if err != nil {
                        if _, ok := err.(CloseError); ok {
                            action = frisbee.CLOSE
                        }
                        res.Error(outgoing.Content, err)
                    } else {
                        res.Encode(outgoing.Content)
                    }
                    outgoing.Metadata.ContentLength = uint32(outgoing.Content.Len())
                }
                return
            }
            {{end -}}
        {{end -}}
    {{end -}}
{{end}}
