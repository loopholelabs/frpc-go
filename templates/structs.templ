{{define "structs"}}
    {{ range $i, $v := (MakeIterable $.Messages.Len) }}
        {{ $message := $.Messages.Get $i }}
        {{ if not $message.IsMapEntry }}
            {{template "structs" $message}}
        {{end}}
    {{end}}
    {{ range $i, $v := (MakeIterable $.Fields.Len) -}}
        {{ $field := $.Fields.Get $i }}
        {{ if $field.IsMap }}
            {{ $mapKeyValue := FindValue $field.MapKey }}
            {{ $mapValueValue := FindValue $field.MapValue }}
            type {{ CamelCase $field.FullName }}Map map[{{ $mapKeyValue }}]{{ $mapValueValue }}
            func New{{ CamelCase $field.FullName }}Map (size uint32) map[{{ $mapKeyValue }}]{{$mapValueValue}} {
                return make(map[{{ $mapKeyValue }}]{{ $mapValueValue }}, size)
            }

            {{template "encodeMap" $field}}
            {{template "decodeMap" $field}}
        {{end}}
    {{end -}}
    type {{ CamelCase .FullName }} struct {
        error error
        flags uint8

        {{ range $i, $v := (MakeIterable $.Fields.Len) -}}
            {{ $field := $.Fields.Get $i -}}
            {{ $value := FindValue $field -}}
            {{ CamelCaseName $field.Name }} {{ $value }}
        {{end -}}
    }

    {{template "getFunc" .}}
    {{template "error" .}}
    {{template "encode" .}}
    {{template "decode" .}}
    {{template "internalDecode" .}}
{{end}}

{{define "getFunc"}}
func New{{ CamelCase .FullName }}() *{{ CamelCase .FullName }} {
    return &{{ CamelCase .FullName }}{
        {{ range $i, $v := (MakeIterable .Fields.Len) -}}
            {{ $field := $.Fields.Get $i -}}
            {{ if and (eq $field.Kind 11) (ne $field.Cardinality 3) -}} {{/* protoreflect.MessageKind protoreflect.Repeated */ -}}
                {{ CamelCaseName $field.Name }}: New{{ CamelCase $field.Message.FullName }}(),
            {{end -}}
        {{end -}}
    }
}
{{end}}

{{define "error"}}
func (x *{{CamelCase .FullName}}) Error(p *polyglot.Buffer, err error) {
    polyglot.Encoder(p).Error(err)
}
{{end}}