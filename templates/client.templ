{{define "client"}}
{{ range $i, $v := (MakeIterable .services.Len) -}}
    {{ $service := $.services.Get $i -}}
    type sub{{ CamelCaseName $service.Name }}Client struct {
         client *frisbee.Client
         {{ range $i, $v := (MakeIterable $service.Methods.Len) -}}
             {{ $method := $service.Methods.Get $i -}}
             {{ if not (or $method.IsStreamingServer $method.IsStreamingClient) -}}
             next{{ CamelCaseName $method.Name }} uint16
             next{{ CamelCaseName $method.Name }}Mu sync.RWMutex
             inflight{{ CamelCaseName $method.Name }} map[uint16]chan *{{ CamelCase $method.Output.FullName }}
             inflight{{ CamelCaseName $method.Name }}Mu sync.RWMutex
             {{ end -}}
         {{end -}}
        nextStreamingID uint16
        nextStreamingIDMu sync.RWMutex
    }
{{end -}}


type Client struct {
    *frisbee.Client
    {{ range $i, $v := (MakeIterable .services.Len) -}}
        {{ $service := $.services.Get $i -}}
        {{ CamelCaseName $service.Name }} *sub{{ CamelCaseName $service.Name }}Client
    {{end -}}
}

func NewClient (tlsConfig *tls.Config, logger *zerolog.Logger) (*Client, error) {
    c := new(Client)
    table := make(frisbee.HandlerTable)
    {{template "clienthandlers" .services -}}

    var err error
    if tlsConfig != nil {
        c.Client, err = frisbee.NewClient(table, context.Background(), frisbee.WithTLS(tlsConfig), frisbee.WithLogger(logger))
        if err != nil {
            return nil, err
        }
    } else {
        c.Client, err = frisbee.NewClient(table, context.Background(), frisbee.WithLogger(logger))
        if err != nil {
            return nil, err
        }
    }

    {{ range $i, $v := (MakeIterable .services.Len) -}}
        {{ $service := $.services.Get $i -}}
        c.{{ CamelCaseName $service.Name }} = new(sub{{ CamelCaseName $service.Name }}Client)
        c.{{ CamelCaseName $service.Name }}.client = c.Client
        {{ range $i, $v := (MakeIterable $service.Methods.Len) -}}
            {{ $method := $service.Methods.Get $i -}}
                {{ if not (or $method.IsStreamingServer $method.IsStreamingClient) -}}
                c.{{ CamelCaseName $service.Name }}.next{{ CamelCaseName $method.Name }}Mu.Lock()
                c.{{ CamelCaseName $service.Name }}.next{{ CamelCaseName $method.Name }} = 0
                c.{{ CamelCaseName $service.Name }}.next{{ CamelCaseName $method.Name }}Mu.Unlock()
                c.{{ CamelCaseName $service.Name }}.inflight{{ CamelCaseName $method.Name }} = make(map[uint16]chan *{{ CamelCase $method.Output.FullName }})
                {{ end -}}
        {{end -}}
    {{end -}}
    return c, nil
}

func (c *Client) Connect(addr string, streamHandler ...frisbee.NewStreamHandler) error {
    return c.Client.Connect(addr, func (stream *frisbee.Stream) { })
}

func (c *Client) FromConn(conn net.Conn, streamHandler ...frisbee.NewStreamHandler) error {
    return c.Client.FromConn(conn, func (stream *frisbee.Stream) { })
}

{{template "clientmethods" .services }}

type CloseError struct {
    err error
}

func NewCloseError(err error) CloseError {
    return CloseError{err: err}
}

func (e CloseError) Error() string {
    return e.err.Error()
}
{{ end -}}

{{define "clienthandlers"}}
{{ $counter := Counter 9 -}}
{{ range $i, $v := (MakeIterable .Len) }}
    {{ $service := $.Get $i -}}
    {{ range $i, $v := (MakeIterable $service.Methods.Len) -}}
        {{ $method := $service.Methods.Get $i -}}
        {{ $count := call $counter -}}

        {{ if not (or $method.IsStreamingServer $method.IsStreamingClient) -}}
        table[{{ $count }}] = func(ctx context.Context, incoming *packet.Packet) (outgoing *packet.Packet, action frisbee.Action) {
            c.{{ CamelCaseName $service.Name }}.inflight{{ CamelCaseName $method.Name }}Mu.RLock()
            if ch, ok := c.{{ CamelCaseName $service.Name }}.inflight{{ CamelCaseName $method.Name }}[incoming.Metadata.Id]; ok {
                c.{{ CamelCaseName $service.Name }}.inflight{{ CamelCaseName $method.Name }}Mu.RUnlock()
                res := New{{ CamelCase $method.Output.FullName }}()
                res.Decode((*incoming.Content)[:incoming.Metadata.ContentLength])
                ch <- res
            } else {
                c.{{ CamelCaseName $service.Name }}.inflight{{ CamelCaseName $method.Name }}Mu.RUnlock()
            }
            return
        }
        {{ end -}}
    {{end -}}
{{end -}}
{{ end -}}

{{define "clientmethods"}}
{{ $counter := Counter 9 -}}
{{ range $i, $v := (MakeIterable .Len) -}}
    {{ $service := $.Get $i -}}
    {{ range $i, $v := (MakeIterable $service.Methods.Len) }}
        {{ $method := $service.Methods.Get $i -}}
        {{ $opIndex := call $counter -}}
        {{if or $method.IsStreamingClient $method.IsStreamingServer -}}
            func (c *sub{{ CamelCaseName $service.Name }}Client) {{ CamelCaseName $method.Name }}(ctx context.Context, req *{{ CamelCase $method.Input.FullName }}) (*{{ CamelCaseName $method.Name }}Client, error) {
                p := packet.Get()

                c.nextStreamingIDMu.Lock()
                c.nextStreamingID += 1
                id := c.nextStreamingID
                c.nextStreamingIDMu.Unlock()

                open := &RPCStreamOpen{operation: {{ $opIndex}}};

                open.Encode(p.Content)
                p.Metadata.ContentLength = uint32(len(*p.Content))

                fStream := c.client.Stream(id)
                fStream.WritePacket(p)

                if req != nil {
                    p2 := packet.Get()
                    req.Encode(p2.Content)
                    p2.Metadata.ContentLength = uint32(len(*p2.Content))
                    fStream.WritePacket(p2)
                }

                stream := {{ CamelCaseName $method.Name }}Client{
                    context: ctx,
                    stream: fStream,
                    closed: atomic.NewBool(false),
                }

                stream.recv = func () (*{{ CamelCase $method.Output.FullName }}, error) {
                    p, err := stream.stream.ReadPacket()
                    if err != nil {
                        return nil, err
                    }

                    res := New{{ CamelCase $method.Output.FullName }}()
                    err = res.Decode(*p.Content)
                    if err != nil {
                        return nil, err
                    }
                    if errors.Is(res.error, io.EOF) {
                        return nil, io.EOF
                    }

                    return res, nil
                }

                stream.close = func () {
                    stream.stream.Close()
                }
                stream.send = func (m *{{ CamelCase $method.Input.FullName }}) error {
                    p := packet.Get()

                    m.Encode(p.Content)
                    p.Metadata.ContentLength = uint32(len(*p.Content))
                    return stream.stream.WritePacket(p)
                }
                return &stream, nil
            }

            type {{ CamelCaseName $method.Name }}Client struct {
                context context.Context
                recv func() (*{{ CamelCase $method.Output.FullName }}, error)
                close func()
                closed *atomic.Bool

                stream *frisbee.Stream
                send func (*{{ CamelCase $method.Input.FullName }}) error
            }

            {{ if $method.IsStreamingServer -}}
            func (x *{{ CamelCaseName $method.Name }}Client) Recv() (*{{ CamelCase $method.Output.FullName }}, error) {
                return x.recv()
            }
            {{ end -}}

            {{ if $method.IsStreamingClient -}}
                func (x *{{ CamelCaseName $method.Name }}Client) Send(m *{{ CamelCase $method.Input.FullName }}) error {
                    return x.send(m)
                }

                func (x *{{ CamelCaseName $method.Name }}Client) CloseSend() error {
                    return x.send(&{{ CamelCase $method.Input.FullName }}{error: io.EOF})
                }

                func (x *{{ CamelCaseName $method.Name }}Client) CloseAndRecv() (*{{ CamelCase $method.Output.FullName }}, error) {
                    err := x.send(&{{ CamelCase $method.Input.FullName }}{error: io.EOF})
                    if err != nil {
                        return nil, err
                    }
                    return x.recv()
                }
            {{ end -}}
        {{else -}}
        func (c *sub{{ CamelCaseName $service.Name }}Client) {{ CamelCaseName $method.Name }}(ctx context.Context, req *{{ CamelCase $method.Input.FullName }}) (res *{{ CamelCase $method.Output.FullName }}, err error) {
            ch := make(chan *{{ CamelCase $method.Output.FullName }}, 1)
            p := packet.Get()
            p.Metadata.Operation = {{ $opIndex }}

            c.next{{ CamelCaseName $method.Name }}Mu.Lock()
            c.next{{ CamelCaseName $method.Name }} += 1
            id := c.next{{ CamelCaseName $method.Name }}
            c.next{{ CamelCaseName $method.Name }}Mu.Unlock()
            p.Metadata.Id = id

            req.Encode(p.Content)
            p.Metadata.ContentLength = uint32(len(*p.Content))
            c.inflight{{ CamelCaseName $method.Name }}Mu.Lock()
            c.inflight{{ CamelCaseName $method.Name }}[id] = ch
            c.inflight{{ CamelCaseName $method.Name }}Mu.Unlock()
            err = c.client.WritePacket(p)
            if err != nil {
                packet.Put(p)
                return
            }
            select {
                case res = <- ch:
                    err = res.error
                case <- ctx.Done():
                    err = ctx.Err()
            }
            c.inflight{{ CamelCaseName $method.Name }}Mu.Lock()
            delete(c.inflight{{ CamelCaseName $method.Name }}, id)
            c.inflight{{ CamelCaseName $method.Name }}Mu.Unlock()
            packet.Put(p)
            return
        }
    {{end -}}
{{end -}}
{{ end -}}
{{end}}
